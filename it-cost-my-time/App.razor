<MudDialogProvider />
<MudSnackbarProvider />
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />

@using it_cost_my_time.Entities;
@using it_cost_my_time.Services;
@page "/"
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<PageTitle>It Cost My Time :)</PageTitle>

<MudLayout>

    <MudAppBar Color="Color.Primary" Fixed="false" Elevation="0">
        <MudButton Color="Color.Warning" Variant="Variant.Filled" DisableElevation="true">It Cost Me Time :)</MudButton>
        <MudSpacer />
        <MudSelect @onchange="UpdateConfiguration" T="string" Label="Currency" @bind-Value="@configuration.Currency">
            <MudSelectItem Value="@("€")" />
            <MudSelectItem Value="@("$")" />
            <MudSelectItem Value="@("£")" />
            <MudSelectItem Value="@("CHF")" />
        </MudSelect>
    <MudSpacer />
    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Target="_blank" Href="https://github.com/lorenzo-deluca/it-cost-my-time" Edge="Edge.End" />
    </MudAppBar>
     
    <MudExpansionPanels DisableBorders="false" Elevation="0" MultiExpansion="true">
        <MudExpansionPanel IsInitiallyExpanded="true">

            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                    <MudText>Income Configuration</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                <MudSwitch @onchange="UpdateConfiguration" @bind-Checked="@configuration.IncomeTypeSelect" Label="Income Type" Color="Color.Success" />
                <MudNumericField @onchange="UpdateConfiguration" DefaultFocus="DefaultFocus" @bind-Value="configuration.Income" @bind-Label="@configuration.IncomeType" Variant="Variant.Outlined" Step=".2M" />
                @if (!configuration.IncomeTypeSelect)
                {
                    <MudSelect T="int" Label="Monthly Payments" Clearable="false" @onchange="UpdateConfiguration" @bind-Value="@configuration.PayMonths">
                        @for (int month = 10; month <= 15; month++)
                        {
                            <MudSelectItem Value="@month" />
                        }
                    </MudSelect>
                }
                <MudSlider @onchange="UpdateConfiguration" @bind-Value="configuration.WorkingDays" Min="1" Max="7" Step="1" Color="Color.Info">Working Days <b>@configuration.WorkingDays.ToString()</b> (for week)</MudSlider>
                <MudSlider @onchange="UpdateConfiguration" @bind-Value="configuration.WorkingHours" Min="1" Max="24" Step="1" Color="Color.Warning">Working Hours <b>@configuration.WorkingHours.ToString()</b> (h/day)</MudSlider>
                <MudSlider @onchange="UpdateConfiguration" Size="Size.Large" Min="1" Max="100" Step="1" @bind-Value="@configuration.SavingRate">Saving Rate <b>@configuration.SavingRate.ToString()</b> %</MudSlider>
            </ChildContent>

        </MudExpansionPanel>

        <MudExpansionPanel IsInitiallyExpanded="true">

            <TitleContent>
                <div class="d-flex">
                    <MudIcon Icon="@Icons.Material.Filled.Info" class="mr-3"></MudIcon>
                    <MudText>Saving Calculation</MudText>
                </div>
            </TitleContent>
            <ChildContent>
                Yearly Saving <b>@calculateService.YearlySavings.ToString("0.00") @configuration.Currency</b> (income @calculateService.YearlyIncome.ToString("0.00") @configuration.Currency)  <br />
                Monthly Saving <b>@calculateService.MonthlySavings.ToString("0.00") @configuration.Currency</b> (income @calculateService.MonthlyIncome.ToString("0.00") @configuration.Currency)  <br />
                Daily Saving <b>@calculateService.DailySaving.ToString("0.00") @configuration.Currency</b> (income @calculateService.DailyIncome.ToString("0.00") @configuration.Currency) <br />
                Hourly Saving <b>@calculateService.HourlySaving.ToString("0.00") @configuration.Currency</b> (income @calculateService.HourlyIncome.ToString("0.00") @configuration.Currency) <br />
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>

    <MudCard>
        <MudCardContent>
            <MudTextField @bind-Value="Amount" Size="Size.Large" Label="Item Cost" Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" AdornmentColor="Color.Warning" />
        </MudCardContent>

        <MudCardContent>
        <MudText Typo="Typo.h5">This item cost you </MudText>

        @if (calculateService.CalculateItemTimeCost(Amount).hours > 40)
        {
            <MudText Typo="Typo.h1">@calculateService.CalculateItemTimeCost(Amount).days.ToString("0.00") </MudText>
            <small>working days saving</small>
        }
        else
        {
            <MudText Typo="Typo.h1">@calculateService.CalculateItemTimeCost(Amount).hours.ToString("0.00")</MudText>
            <small>working hours saving</small>
        }

        </MudCardContent>
    </MudCard>

    <MudAppBar Bottom="true" Fixed="true" Color="Color.Secondary" Elevation="1">
        <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Warning" Class="ma-4" Size="Size.Small" T="bool" Label=" Light/Dark Mode" />
        <MudSpacer />
        <a href="mailto:me@lorenzodeluca.dev">me@lorenzodeluca.dev</a>
        <MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" Color="Color.Inherit" Target="_blank" Href="https://www.linkedin.com/in/lorenzo-de-luca/" Edge="Edge.End" />
        <MudIconButton Icon="@Icons.Material.Filled.FavoriteBorder" Href="https://www.buymeacoffee.com/lorenzodeluca" Target="_blank" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
</MudLayout>

@code {

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    Configuration configuration = new Configuration();
    CalculateService calculateService;

    public decimal Amount = 100;

    public EventCallback<ChangeEventArgs> ValueChanged { get; set; }

    public App() {
        calculateService = new CalculateService(configuration);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync() {
        string query = Navigation.ToAbsoluteUri(Navigation.Uri).Query;        
        if (!string.IsNullOrWhiteSpace(query) && query.Split('?').Count() > 1 && query.Split('?')[1].Split('=').Count() > 0){
            // parse amount in url parameters
            Amount = decimal.TryParse(query.Split('?')[1].Split('=')[1], out Amount) ? Amount : 0;
        }

        try
        {
            var readConfiguration = await localStorage.GetItemAsync<Configuration>("IncomeConfiguration");
            configuration.ReadConfiguration(readConfiguration);
        }
        catch
        {

        }
    }


    private void UpdateConfiguration()
    {
        localStorage.SetItemAsync<Configuration>("IncomeConfiguration", configuration);
    }
}